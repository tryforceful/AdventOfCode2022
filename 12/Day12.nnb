{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "Get Input\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const fs = require(\"fs\");\n\nlet data: string;\nlet input: string[];\n\ndata = fs.readFileSync(\"./inputs/day12.txt\", \"utf8\");\ninput = data.split(\"\\n\").slice(0, -1);\n\nconst inputgrid = input.map((str) => Array.from(str)); //41x180\n\ninputgrid;\n\nconst height = inputgrid.length,\n  width = inputgrid[0].length;\n\nconst findNodeByLetter = (letter: string): unknown =>\n  inputgrid.flatMap((row, r_idx) => {\n    const x = row.findIndex((char) => char === letter);\n    return ~x ? [r_idx, x] : [];\n  });\n\nconst _startnode = findNodeByLetter(\"S\") as [number, number];\nconst _endnode = findNodeByLetter(\"E\") as [number, number];\n\nconsole.log(_startnode, _endnode);\n\ninputgrid[_startnode[0]][_startnode[1]] = \"a\";\ninputgrid[_endnode[0]][_endnode[1]] = \"z\";\n\n// define heuristic\n\n// Heuristic will be shortest zig-zag line path between S and E\n\nconst h = ([node_x, node_y]: [number, number]) =>\n  Math.abs(node_x - _endnode[0]) + Math.abs(node_y - _endnode[1]);\n\n\n// Round 2 heuristic will just be to get to the left edge as quickly as possible\n\nconst h2 = ([node_x, node_y]: [number, number]) => node_y;\n\n//\nfunction reconstructPath(cameFrom: Map<string, string>, current: string) {\n  const totalPath = [current];\n  let cur: string | undefined = current;\n  if (!cur) return totalPath;\n\n  while (cur !== undefined) {\n    if (cur) {\n      const new_cur = cameFrom.get(cur);\n      cur = new_cur;\n      if (cur) totalPath.unshift(cur);\n    }\n  }\n  return totalPath;\n}\n\nconst numsort = (a, b) => (a < b ? 1 : a > b ? -1 : 0);\nconst numsortidx = (a, b) => (a[0] < b[0] ? 1 : a[0] > b[0] ? -1 : 0);\n\nlet SHORTEST_LENGTH = Infinity;\n\n// A Star Algorithm\nconst startnode = _startnode.join(\",\");\nconst endnode = _endnode.join(\",\");\n\nconst openSet = new Set([startnode]);\n\nconst cameFrom = new Map<string, string>();\nconst gScore = { [startnode]: 0 };\nconst fScore = { [startnode]: h2(_startnode) };\n\nwhile (openSet.size > 0) {\n  console.dir(openSet);\n\n  const a: [number, string][] = [...openSet].map((x) => [\n    fScore[x] ?? Infinity,\n    x,\n  ]);\n\n  const current = a.sort(numsortidx)[0][1];\n\n  const _current = current.split(\",\").map(Number);\n\n  if (current === endnode) {\n    const BEST_PATH = reconstructPath(cameFrom, current);\n\n    // console.log(\"BEST PATH: size\", BEST_PATH.length - 1);\n    // console.dir(BEST_PATH);\n\n    SHORTEST_LENGTH = Math.min(BEST_PATH.length - 1, SHORTEST_LENGTH);\n  }\n\n  openSet.delete(current);\n\n  for (const i of [\n    [-1, 0],\n    [1, 0],\n    [0, -1],\n    [0, 1],\n  ]) {\n    //each cardinal direction\n    const _neighbor = [_current[0] + i[0], _current[1] + i[1]];\n    const neighbor = _neighbor.join(\",\");\n\n    if (\n      _neighbor[0] < 0 ||\n      _neighbor[0] >= height ||\n      _neighbor[1] < 0 ||\n      _neighbor[1] >= width\n    )\n      continue;\n\n    const currentval = inputgrid?.[_current[0]]?.[_current[1]];\n    const neighborval = inputgrid?.[_neighbor[0]]?.[_neighbor[1]];\n\n    if (gScore[current] == undefined) console.error(\"Nooo\", current);\n    if (!neighborval) console.error(\"Nooo2\", neighbor);\n\n    const line_weight =\n      currentval.charCodeAt(0) <= neighborval.charCodeAt(0) + 1 ? 1 : Infinity;\n\n    const tentative_gscore = gScore[current] + line_weight;\n\n    if (tentative_gscore < (gScore[neighbor] ?? Infinity)) {\n      cameFrom.set(neighbor, current);\n      gScore[neighbor] = tentative_gscore;\n      fScore[neighbor] = tentative_gscore + h2(_neighbor as [number, number]);\n\n      openSet.add(neighbor);\n\n       console.log(openSet);\n    }\n  }\n}\n\nconsole.log(\"Final:\", SHORTEST_LENGTH);\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[ 0, 0 ] [ 2, 5 ]",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "Set(1) {",
                                "  \u001b[32m'0,0'\u001b[39m",
                                "}"
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}